/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
*/

:root {
  --spectrum-listview-item-compact-padding-y: var(--spectrum-global-dimension-size-50);
  --spectrum-listview-item-regular-padding-y: var(--spectrum-global-dimension-size-85);
  --spectrum-listview-item-spacious-padding-y: var(--spectrum-global-dimension-size-100);
  --spectrum-listview-border-width: var(--spectrum-table-border-size, var(--spectrum-alias-border-size-thin));
  --spectrum-listview-border-radius: var(--spectrum-table-border-radius, var(--spectrum-alias-border-radius-regular));
  --spectrum-listview-item-border-radius: calc(var(--spectrum-listview-border-radius) - var(--spectrum-listview-border-width));
  --spectrum-listview-row-sticky-focus-indicator-width: 3px;
}

.react-spectrum-ListView {
  box-sizing: border-box;
  border-color: var(--spectrum-table-border-color, var(--spectrum-alias-border-color-mid));
  border-style: solid;
  position: relative;
  border-width: var(--spectrum-listview-border-width);
  border-radius: var(--spectrum-listview-border-radius);
  overflow: auto;
  vertical-align: var(--spectrum-table-cell-vertical-alignment);
  border-collapse: separate;
  border-spacing: 0;
  transform: translate3d(0, 0, 0);
  padding: 0;
  background-color: var(--spectrum-table-background-color, var(--spectrum-global-color-gray-50));
  outline: 0;
  user-select: none;

  .react-spectrum-ListView-row {
    outline: none;
  }

  &.react-spectrum-ListView--emphasized {
    .react-spectrum-ListViewItem {
      /* common pseudoelement for box shadows */
      &:after {
        content: '';
        display: block;
        position: absolute;
        inset-inline-start: 0;
        inset-inline-end: 0;
        inset-block-end: 0;
        inset-block-start: 0;
        z-index: 3;
        pointer-events: none;
      }

      &.is-selected {
        background-color: var(--spectrum-table-row-background-color-selected);
        &.is-hovered,
        &.is-active {
          background-color: var(--spectrum-table-row-background-color-selected-hover);
        }

        &:focus-ring {
          background-color: var(--spectrum-table-row-background-color-selected-key-focus);
        }

        /* Box shadow for left, right, and bottom border for selected rows. */
        &:after {
          box-shadow: inset 1px 0 0 0 var(--spectrum-global-color-blue-500), inset -1px 0 0 0 var(--spectrum-global-color-blue-500), inset 0 -1px 0 0 var(--spectrum-global-color-blue-500), inset 0 1px 0 0 var(--spectrum-global-color-blue-500);
        }

        &.is-prev-selected {
          &:after {
            box-shadow: inset 1px 0 0 0 var(--spectrum-global-color-blue-500), inset -1px 0 0 0 var(--spectrum-global-color-blue-500), inset 0 -1px 0 0 var(--spectrum-global-color-blue-500);
          }
        }
      }
    }

    &:not(.react-spectrum-ListView--quiet) {
      .react-spectrum-ListViewItem {
        /* Box shadow for bottom border for non-selected rows that aren't immediately above a selected row (grey border bottom). */
        /* Also omit bottom border for last row if the total content height of the ListView is equal or greater than the height of the container. This avoids overlapping bottom borders. */
        &:not(.is-selected):not(.is-next-selected):not(.react-spectrum-ListViewItem--isFlushBottom) {
          &:after {
            box-shadow: inset 0 -1px 0 0 var(--spectrum-table-cell-border-color);
          }
        }

        &.react-spectrum-ListViewItem--firstRow.is-selected {
          &:after {
            border-start-start-radius: var(--spectrum-listview-item-border-radius);
            border-start-end-radius: var(--spectrum-listview-item-border-radius);
          }
        }
      }

      &:not(.react-spectrum-ListView--loadingMore) {
        .react-spectrum-ListViewItem--lastRow.react-spectrum-ListViewItem--isFlushBottom.is-selected {
          &:after {
            border-end-start-radius: var(--spectrum-listview-item-border-radius);
            border-end-end-radius: var(--spectrum-listview-item-border-radius);
          }
        }
      }

      &.react-spectrum-ListView--isScrollingVertically {
        .react-spectrum-ListViewItem {
          &.react-spectrum-ListViewItem--firstRow.is-selected {
            &:after {
              border-start-end-radius: 0;
            }
          }
        }

        &:not(.react-spectrum-ListView--loadingMore) {
          .react-spectrum-ListViewItem--lastRow.react-spectrum-ListViewItem--isFlushBottom.is-selected {
            &:after {
              border-end-end-radius: 0;
            }
          }
        }
      }

      &.react-spectrum-ListView--isScrollingHorizontally {
        &:not(.react-spectrum-ListView--loadingMore) {
          .react-spectrum-ListViewItem--lastRow.react-spectrum-ListViewItem--isFlushBottom.is-selected {
            &:after {
              border-end-start-radius: 0;
              border-end-end-radius: 0;
            }
          }
        }
      }
    }
  }
  &.react-spectrum-ListView--wrap .react-spectrum-ListViewItem {
    & .react-spectrum-ListViewItem-content,
    & .react-spectrum-ListViewItem-description {
      white-space: normal;
    }
  }
}

.react-spectrum-ListView-row {
  cursor: default;
  /* Not sticky because listview is a single column. If we want to make sticky, will need a cell wrapper like TableView for display: inline-block */
  &:focus-ring {
    &:before {
      content: '';
      position: absolute;
      inset-block-start: 0;
      inset-block-end: 0;
      inset-inline-start: 0;
      width: var(--spectrum-listview-row-sticky-focus-indicator-width);
      z-index: 4;
      background: var(--spectrum-selectlist-option-focus-indicator-color);
    }
  }
}

.react-spectrum-ListView.react-spectrum-ListView--quiet {
  background-color: var(--spectrum-alias-background-color-transparent);
  border-width: 0;
  border-radius: 0;

  .react-spectrum-ListView-row {
    &.round-tops {
      &:focus-ring {
        &:before {
          border-start-start-radius: var(--spectrum-listview-item-border-radius);
        }
      }
      & > .react-spectrum-ListViewItem {
        border-start-start-radius: var(--spectrum-listview-item-border-radius);
        border-start-end-radius: var(--spectrum-listview-item-border-radius);

        &:after {
          border-start-start-radius: var(--spectrum-listview-item-border-radius);
          border-start-end-radius: var(--spectrum-listview-item-border-radius);
        }
      }
    }

    &.round-bottoms {
      &:focus-ring {
        &:before {
          border-end-start-radius: var(--spectrum-listview-item-border-radius);
        }
      }
      & > .react-spectrum-ListViewItem {
        border-end-start-radius: var(--spectrum-listview-item-border-radius);
        border-end-end-radius: var(--spectrum-listview-item-border-radius);

        &:after {
          border-end-start-radius: var(--spectrum-listview-item-border-radius);
          border-end-end-radius: var(--spectrum-listview-item-border-radius);
        }
      }
    }
  }
}

.react-spectrum-ListViewItem {
  display: grid; /* TODO: define grid areas */
  box-sizing: border-box;
  font-size: var(--spectrum-table-cell-text-size, var(--spectrum-alias-font-size-default));
  font-weight: var(--spectrum-table-cell-text-font-weight, var(--spectrum-global-font-weight-regular));
  line-height: calc(var(--spectrum-table-cell-text-size, var(--spectrum-alias-font-size-default)) * var(--spectrum-table-cell-text-line-height, var(--spectrum-alias-body-text-line-height)) - 1px);
  padding: var(--spectrum-listview-item-regular-padding-y) var(--spectrum-global-dimension-size-160);
  position: relative;
  /*background-color: var(--spectrum-table-background-color, var(--spectrum-global-color-gray-50));*/
  color: var(--spectrum-table-cell-text-color, var(--spectrum-alias-text-color));
  outline: 0;
  min-height: var(--spectrum-global-dimension-size-500);

  &.is-hovered,
  &.is-focused {
    background-color: var(--spectrum-table-row-background-color-hover);
  }

  &:focus-ring {
    background-color: var(--spectrum-table-row-background-color-hover);
  }

  &.is-active {
    background-color: var(--spectrum-table-row-background-color-down);
  }

  &.is-selected {
    background-color: var(--spectrum-table-row-background-color-hover);

    &.is-hovered,
    &.is-active {
      background-color: var(--spectrum-table-row-background-color-hover);
    }

    &:focus-ring {
      background-color: var(--spectrum-table-row-background-color-selected-key-focus);
    }
  }

  &.has-checkbox {
    /* have to eliminate vertical padding to allow proper vertical alignment */
    padding-top: 0px;
    padding-bottom: 0px;
  }

  .react-spectrum-ListViewItem-grid {
    display: grid;
    grid-template-columns: auto auto auto auto 1fr auto auto;
    grid-template-rows: 1fr auto;
    grid-template-areas:
      "draghandle checkbox icon image content actions actionmenu chevron"
      "draghandle checkbox icon image description actions actionmenu chevron";
    align-items: center;
  }

  .react-spectrum-ListViewItem-draghandle-container {
    grid-area: draghandle;
    width: var(--spectrum-global-dimension-size-250);
    display: flex;
    align-self: stretch;
    justify-self: stretch;
    justify-content: center;
    padding: var(--spectrum-global-dimension-size-25);
    padding-inline-start: var(--spectrum-global-dimension-size-40);


    .react-spectrum-ListViewItem-draghandle-button {
      width: var(--spectrum-global-dimension-size-200);
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: var(--spectrum-alias-border-radius-regular);

      &:focus-ring {
        box-shadow: inset 0 0 0 2px var(--spectrum-table-cell-border-color-key-focus);
        outline: none;
      }
    }
  }

  .react-spectrum-ListViewItem-checkboxWrapper {
    grid-area: checkbox;
    align-items: center;
    justify-items: center;
    transition-duration: 160ms;
    display: flex;
  }

  .react-spectrum-ListViewItem-checkbox {
    min-height: 0;
    height: 100%;

    > span {
      margin: 0;
    }
  }

  .react-spectrum-ListViewItem-icon,
  .react-spectrum-ListViewItem-image {
    grid-area: image;
    align-items: center;
    justify-items: center;
    padding-inline-end: var(--spectrum-global-dimension-size-100);
  }

  .react-spectrum-ListViewItem-image {
    display: flex;
    border-radius: var(--spectrum-global-dimension-size-25);
    width: var(--spectrum-global-dimension-size-400);
    height: var(--spectrum-global-dimension-size-400);
    align-items: center;
    justify-content: center;
    > img {
      width: unset;
      height: unset;
      max-height: 100%;
    }
  }

  .react-spectrum-ListViewItem-content,
  .react-spectrum-ListViewItem-description {
    flex-grow: 1;

    /* truncate text with ellipsis */
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .react-spectrum-ListViewItem-content {
    grid-area: content;
  }

  .react-spectrum-ListViewItem-description {
    grid-area: description;
  }

  .react-spectrum-ListViewItem-actions {
    grid-area: actions;
    flex-grow: 0;
    flex-shrink: 0;
  }

  .react-spectrum-ListViewItem-actionmenu {
    grid-area: actionmenu;
  }

  .react-spectrum-ListViewItem-parentIndicator {
    grid-area: chevron;
    padding-inline-start: var(--spectrum-global-dimension-size-75);
    display: none;
  }

  &.react-spectrum-ListViewItem-dragPreview {
    width: var(--spectrum-global-dimension-size-2400);
    border: 1px solid var(--spectrum-dropzone-border-color-selected-hover);
    border-radius: var(--spectrum-alias-border-radius-regular);
    background-color: var(--spectrum-table-background-color, var(--spectrum-global-color-gray-50));

    .react-spectrum-ListViewItem-grid {
      grid-template-areas:
        "icon image content     . badge"
        "icon image description . badge";
      grid-template-columns: auto auto auto 1fr;
    }

    .react-spectrum-ListViewItem-badge {
      grid-area: badge;
      color: white;
      background: var(--spectrum-global-color-blue-400);
      padding: 0 8px;
      border-radius: var(--spectrum-alias-border-radius-regular);
    }

    &.react-spectrum-ListViewItem-dragPreview--multiple {
      position: relative;

      &:after {
        content: '';
        display: block;
        position: absolute;
        z-index: -1;
        top: 4px;
        inset-inline-start: 4px;
        width: 100%;
        height: 100%;
        border: 1px solid var(--spectrum-dropzone-border-color-selected-hover);
        border-radius: var(--spectrum-alias-border-radius-regular);
        background-color: var(--spectrum-table-background-color, var(--spectrum-global-color-gray-50));
      }
    }

    .react-spectrum-ListViewItem-actions,
    .react-spectrum-ListViewItem-actionmenu {
      display: none;
    }
  }
}
.react-spectrum-ListView:not(.react-spectrum-ListView--quiet) {
  /* give first and last items border-radius to match listview container */
  .react-spectrum-ListViewItem--firstRow.react-spectrum-ListViewItem {
    border-start-start-radius: var(--spectrum-listview-item-start-end-border-radius);
    border-start-end-radius: var(--spectrum-listview-item-start-end-border-radius);
  }

  .react-spectrum-ListViewItem--lastRow.react-spectrum-ListViewItem {
    border-end-start-radius: var(--spectrum-listview-item-start-end-border-radius);
    border-end-end-radius: var(--spectrum-listview-item-start-end-border-radius);
  }

  &.react-spectrum-ListView--isScrollingVertically {
    .react-spectrum-ListViewItem--firstRow.react-spectrum-ListViewItem {
      border-start-end-radius: 0;
    }

    .react-spectrum-ListViewItem--lastRow.react-spectrum-ListViewItem {
      border-end-end-radius: 0;
    }
  }

  &.react-spectrum-ListView--isScrollingHorizontally {
    .react-spectrum-ListViewItem--lastRow.react-spectrum-ListViewItem {
      border-end-start-radius: 0;
      border-end-end-radius: 0;
    }
  }

  /* When we can use subgrid, get rid of this. */
  &.react-spectrum-ListView--hasAnyChildren {
    .react-spectrum-ListViewItem-parentIndicator {
      display: inline-block;
      visibility: hidden;
    }
    .react-spectrum-ListViewItem-parentIndicator--hasChildItems {
      visibility: visible;
    }
  }
}

.react-spectrum-ListView--compact .react-spectrum-ListViewItem {
  padding-top: var(--spectrum-listview-item-compact-padding-y);
  padding-bottom: var(--spectrum-listview-item-compact-padding-y);
  min-height: var(--spectrum-global-dimension-size-400);
}

.react-spectrum-ListView--spacious .react-spectrum-ListViewItem {
  padding-top: var(--spectrum-listview-item-spacious-padding-y);
  padding-bottom: var(--spectrum-listview-item-spacious-padding-y);
  min-height: var(--spectrum-global-dimension-size-600);
}

.react-spectrum-ListView--draggable .react-spectrum-ListViewItem {
  padding-inline-start: 0;
}

.react-spectrum-ListViewItem--draggable {
  .react-spectrum-ListViewItem-checkbox input {
    inset-inline-start: 0;
  }
}

.react-spectrum-ListView-centeredWrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  &.react-spectrum-ListView-centeredWrapper--loadingMore {
    padding-top: var(--spectrum-global-dimension-size-50);
  }
}

.react-spectrum-ListViewItem-checkbox--enter {
  opacity: 0.01;
  max-width: 0px;
}
.react-spectrum-ListViewItem-checkbox--enterActive {
  opacity: 1;
  max-width: 80px;
}
.react-spectrum-ListViewItem-checkbox--exit {
  opacity: 1;
  max-width: 80px;
}
.react-spectrum-ListViewItem-checkbox--exitActive {
  opacity: 0.01;
  max-width: 0px;
}
