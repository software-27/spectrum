diff --git a/node_modules/@spectrum-css/component-builder/css/plugins/postcss-custom-properties-mapping.js b/node_modules/@spectrum-css/component-builder/css/plugins/postcss-custom-properties-mapping.js
index 0eb302e..cc7d4d3 100644
--- a/node_modules/@spectrum-css/component-builder/css/plugins/postcss-custom-properties-mapping.js
+++ b/node_modules/@spectrum-css/component-builder/css/plugins/postcss-custom-properties-mapping.js
@@ -9,7 +9,6 @@ the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTA
 OF ANY KIND, either express or implied. See the License for the specific language
 governing permissions and limitations under the License.
 */
-var postcss = require('postcss');
 var valueParser = require('postcss-value-parser');
 let varUtils = require('../lib/varUtils.js');
 
@@ -40,33 +39,36 @@ async function fetchVars() {
   return true;
 }
 
-module.exports = postcss.plugin('postcss-custom-properties-mapping', function() {
-  return async function (root, result) {
-    await fetchVars();
+module.exports = function() {
+  return {
+    postcssPlugin: 'postcss-custom-properties-mapping',
+    OnceExit: async function (root, result) {
+      await fetchVars();
 
-    root.walkRules((rule, ruleIndex) => {
-      rule.walkDecls((decl) => {
-        if (customPropertiesRegExp.test(decl.value)) {
-          let value = valueParser(decl.value);
+      root.walkRules((rule, ruleIndex) => {
+        rule.walkDecls((decl) => {
+          if (customPropertiesRegExp.test(decl.value)) {
+            let value = valueParser(decl.value);
 
-          value.walk((node, index, nodes) => {
-            if (node.type === 'function' && node.value === 'var') {
-              let v = node.nodes[0].value;
+            value.walk((node, index, nodes) => {
+              if (node.type === 'function' && node.value === 'var') {
+                let v = node.nodes[0].value;
 
-              // If the value is static, replace the variable with the value.
-              // Otherwise, change the variable name to the mapped name.
-              if (staticVars[v]) {
-                nodes.splice(index, 1, ...valueParser(`var(${v}, ${staticVars[v]})`).nodes);
+                // If the value is static, replace the variable with the value.
+                // Otherwise, change the variable name to the mapped name.
+                if (staticVars[v]) {
+                  nodes.splice(index, 1, ...valueParser(`var(${v}, ${staticVars[v]})`).nodes);
+                }
+                else if (allVars[v]) {
+                  nodes.splice(index, 1, ...valueParser(`var(${v}, ${allVars[v]})`).nodes);
+                }
               }
-              else if (allVars[v]) {
-                nodes.splice(index, 1, ...valueParser(`var(${v}, ${allVars[v]})`).nodes);
-              }
-            }
-          });
+            });
 
-          decl.value = value.toString();
-        }
+            decl.value = value.toString();
+          }
+        });
       });
-    });
-  }
-});
+    }
+  };
+};
diff --git a/node_modules/@spectrum-css/component-builder/css/plugins/postcss-custom-properties-passthrough.js b/node_modules/@spectrum-css/component-builder/css/plugins/postcss-custom-properties-passthrough.js
index 41ae55b..f506479 100644
--- a/node_modules/@spectrum-css/component-builder/css/plugins/postcss-custom-properties-passthrough.js
+++ b/node_modules/@spectrum-css/component-builder/css/plugins/postcss-custom-properties-passthrough.js
@@ -9,9 +9,8 @@ the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTA
 OF ANY KIND, either express or implied. See the License for the specific language
 governing permissions and limitations under the License.
 */
-var postcss = require('postcss');
 
-module.exports = postcss.plugin('postcss-custom-properties-passthrough', function (opts) {
+module.exports = function (opts) {
   opts = opts || {};
 
   return function (root, result) {
@@ -26,4 +25,4 @@ module.exports = postcss.plugin('postcss-custom-properties-passthrough', functio
       });
     });
   }
-});
+};
diff --git a/node_modules/@spectrum-css/component-builder/css/processors.js b/node_modules/@spectrum-css/component-builder/css/processors.js
index 9556e04..4340802 100644
--- a/node_modules/@spectrum-css/component-builder/css/processors.js
+++ b/node_modules/@spectrum-css/component-builder/css/processors.js
@@ -15,106 +15,117 @@ const postcssReal = require('postcss');
 function getProcessors(keepVars = false, notNested = true, secondNotNested = true) {
   return [
     require('postcss-import'),
-    require('postcss-mixins')({
-      mixins: {
-        typography: function(mixin, name, tokenName, textTransformIgnore) {
-          if(!tokenName) {
-            tokenName = name.replace(/\.?([A-Z]|[0-9])/g, function (x,y) { return '-' + y.toLowerCase(); }).replace(/^-/, '');
-            tokenName = tokenName.replace('.spectrum--', '');
-          }
-          var output = '';
-          var propMap = {
-            'font-size': 'text-size',
-            'font-weight': 'text-font-weight',
-            'line-height': 'text-line-height',
-            'font-style': 'text-font-style',
-            'letter-spacing': 'text-letter-spacing',
-            'text-transform': 'text-transform',
-          };
-          function buildProperties (tokeString) {
-            var ruleString = '';
-            Object.keys(propMap).forEach((key) => {
-              if(!textTransformIgnore || key != 'text-transform') {
-                ruleString += `  ${key}: var(--spectrum-${tokeString}-${propMap[key]});\n`;
-              }
-            });
-            ruleString += '  margin-top: 0;\n  margin-bottom: 0;\n';
-            return ruleString;
-          }
-          output = `${name} {
-          ${buildProperties(tokenName)}
-            em {
-              ${buildProperties(`${tokenName}-emphasis`)}
-            }
-            strong {
-              ${buildProperties(`${tokenName}-strong`)}
-            }
-          }`;
-          var nodes = postcssReal.parse(output);
-          nodes.nodes[0].append(mixin.nodes);
-          mixin.replaceWith(nodes);
-        },
-        typographyColor: function(mixin, name, tokenName) {
-          if(!tokenName) {
-            tokenName = name.replace(/\.?([A-Z]|[0-9])/g, function (x,y) { return '-' + y.toLowerCase(); }).replace(/^-/, '');
-            tokenName = tokenName.replace('.spectrum--', '');
-          }
-          var output = `${name} {
-            color: var(--spectrum-${tokenName}-text-color);
-          }`;
-          var nodes = postcssReal.parse(output);
-          nodes.nodes[0].append(mixin.nodes);
-          mixin.replaceWith(nodes);
-        },
-        typographyMargins: function(mixin, name, tokenName) {
-          if(!tokenName) {
-            tokenName = name.replace(/\.?([A-Z]|[0-9])/g, function (x,y) { return '-' + y.toLowerCase(); }).replace(/^-/, '');
-            tokenName = tokenName.replace('.spectrum--', '');
-          }
-          var output = `${name} {
-            margin-top: var(--spectrum-${tokenName}-margin-top);
-            margin-bottom: var(--spectrum-${tokenName}-margin-bottom);
-          }`;
-          var nodes = postcssReal.parse(output);
-          nodes.nodes[0].append(mixin.nodes);
-          mixin.replaceWith(nodes);
-        },
-      }
-    }),
-    require('postcss-nested'),
-    require('postcss-inherit'),
+    // require('postcss-mixins')({
+    //   mixins: {
+    //     typography: function(mixin, name, tokenName, textTransformIgnore) {
+    //       if(!tokenName) {
+    //         tokenName = name.replace(/\.?([A-Z]|[0-9])/g, function (x,y) { return '-' + y.toLowerCase(); }).replace(/^-/, '');
+    //         tokenName = tokenName.replace('.spectrum--', '');
+    //       }
+    //       var output = '';
+    //       var propMap = {
+    //         'font-size': 'text-size',
+    //         'font-weight': 'text-font-weight',
+    //         'line-height': 'text-line-height',
+    //         'font-style': 'text-font-style',
+    //         'letter-spacing': 'text-letter-spacing',
+    //         'text-transform': 'text-transform',
+    //       };
+    //       function buildProperties (tokeString) {
+    //         var ruleString = '';
+    //         Object.keys(propMap).forEach((key) => {
+    //           if(!textTransformIgnore || key != 'text-transform') {
+    //             ruleString += `  ${key}: var(--spectrum-${tokeString}-${propMap[key]});\n`;
+    //           }
+    //         });
+    //         ruleString += '  margin-top: 0;\n  margin-bottom: 0;\n';
+    //         return ruleString;
+    //       }
+    //       output = `${name} {
+    //       ${buildProperties(tokenName)}
+    //         em {
+    //           ${buildProperties(`${tokenName}-emphasis`)}
+    //         }
+    //         strong {
+    //           ${buildProperties(`${tokenName}-strong`)}
+    //         }
+    //       }`;
+    //       var nodes = postcssReal.parse(output);
+    //       nodes.nodes[0].append(mixin.nodes);
+    //       mixin.replaceWith(nodes);
+    //     },
+    //     typographyColor: function(mixin, name, tokenName) {
+    //       if(!tokenName) {
+    //         tokenName = name.replace(/\.?([A-Z]|[0-9])/g, function (x,y) { return '-' + y.toLowerCase(); }).replace(/^-/, '');
+    //         tokenName = tokenName.replace('.spectrum--', '');
+    //       }
+    //       var output = `${name} {
+    //         color: var(--spectrum-${tokenName}-text-color);
+    //       }`;
+    //       var nodes = postcssReal.parse(output);
+    //       nodes.nodes[0].append(mixin.nodes);
+    //       mixin.replaceWith(nodes);
+    //     },
+    //     typographyMargins: function(mixin, name, tokenName) {
+    //       if(!tokenName) {
+    //         tokenName = name.replace(/\.?([A-Z]|[0-9])/g, function (x,y) { return '-' + y.toLowerCase(); }).replace(/^-/, '');
+    //         tokenName = tokenName.replace('.spectrum--', '');
+    //       }
+    //       var output = `${name} {
+    //         margin-top: var(--spectrum-${tokenName}-margin-top);
+    //         margin-bottom: var(--spectrum-${tokenName}-margin-bottom);
+    //       }`;
+    //       var nodes = postcssReal.parse(output);
+    //       nodes.nodes[0].append(mixin.nodes);
+    //       mixin.replaceWith(nodes);
+    //     },
+    //   }
+    // }),
+    // require('postcss-nested'),
+    // require('postcss-inherit'),
     require('postcss-custom-properties')({
       noValueNotifications: 'error',
-      warnings: !keepVars
+      warnings: !keepVars,
+      preserve: false
     }),
     require('./plugins/postcss-custom-properties-passthrough')(),
-    require('postcss-calc'),
-    keepVars ? require('./plugins/postcss-custom-properties-mapping') : null,
-    notNested ? require('./plugins/postcss-notnested')({ replace: '.spectrum' }) : null,
-    require('postcss-svg'),
-    require('postcss-functions')({
-      functions: {
-        noscale: function(value) {
-          return value.toString().toUpperCase();
-        },
-        percent: function(value) {
-          return parseInt(value, 10) / 100;
-        }
+    // require('postcss-calc'),
+    keepVars ? require('./plugins/postcss-custom-properties-mapping')() : null,
+    {
+      postcssPlugin: 'postcss-remove-root',
+      OnceExit(root) {
+        root.walkRules(rule => {
+          if (rule.selector === ':root') {
+            rule.remove();
+          }
+        });
       }
-    }),
-    require('./plugins/postcss-strip-comments')({ preserveTopdoc: false }),
-    require('postcss-focus-ring'),
-    secondNotNested ? require('./plugins/postcss-notnested')() : null, // Second one to catch all stray &
-    require('postcss-discard-empty'),
-    require('autoprefixer')({
-      'browsers': [
-        'IE >= 10',
-        'last 2 Chrome versions',
-        'last 2 Firefox versions',
-        'last 2 Safari versions',
-        'last 2 iOS versions'
-      ]
-    })
+    }
+    // notNested ? require('./plugins/postcss-notnested')({ replace: '.spectrum' }) : null,
+    // require('postcss-svg'),
+    // require('postcss-functions')({
+    //   functions: {
+    //     noscale: function(value) {
+    //       return value.toString().toUpperCase();
+    //     },
+    //     percent: function(value) {
+    //       return parseInt(value, 10) / 100;
+    //     }
+    //   }
+    // }),
+    // require('./plugins/postcss-strip-comments')({ preserveTopdoc: false }),
+    // require('postcss-focus-ring'),
+    // secondNotNested ? require('./plugins/postcss-notnested')() : null, // Second one to catch all stray &
+    // require('postcss-discard-empty'),
+    // require('autoprefixer')({
+    //   'browsers': [
+    //     'IE >= 10',
+    //     'last 2 Chrome versions',
+    //     'last 2 Firefox versions',
+    //     'last 2 Safari versions',
+    //     'last 2 iOS versions'
+    //   ]
+    // })
   ].filter(Boolean);
 }
 
